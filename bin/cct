#!/usr/bin/env ruby
 
require "optparse"
require "ostruct"
require "tmpdir"
require "tempfile"

options = OpenStruct.new

LOCAL_CONFIG = File.join("/home/#{ENV["USER"]}/.cct/config.yaml")

begin
  op = OptionParser.new do |o|
    o.on("--tags TAG_NAMEs", "Tag names separated with commas") {|tags| options.tags = "--tags #{tags}" }
    o.on('--help', "Show this message and exit")                { puts o; exit }
    o.parse!
  end

rescue OptionParser::MissingArgument,
       OptionParser::InvalidOption => err
  abort "Error: #{err.message}"
end

def config
  require "awesome_print"
  require 'bundler/setup'
  Bundler.require(:default)
  Cct.setup(Pathname.new(__dir__).join("..").expand_path, verbose: false)

  ap Cct.config.content
end

def console
  require 'bundler/setup'
  Bundler.require(:default)

  require 'irb'
  require 'cct/cloud/world'

  Cct.setup(Pathname.new(__dir__).join("..").expand_path, verbose: false)
  ARGV.clear
  Cct.update_logger(Cct::BaseLogger.new('console', stdout: true))

  # This brings various methods into the main scope of the IRB session;
  # It's very handy when testing things and playing with stuff
  self.extend(Module.new {
    world = [:admin_node, :control_node, :nodes, :crowbar,
             :config, :exec!, :openstack]

    def cloud
      @cloud ||= Cct::Cloud::World.new
    end

    def crowbar
      cloud.crowbar
    end

    def admin_node
      cloud.admin_node
    end

    def nodes
      cloud.nodes
    end

    def control_node
      cloud.control_node
    end

    def exec! *command
      cloud.exec!(*command)
    end

    def config
      cloud.config.content
    end

    def openstack
      cloud.control_node.openstack
    end

    def world
      world
    end

    puts "Useful methods: #{world.inspect}"
  })

  IRB.start(__FILE__)
end

case ARGV.first
when /console/
  console
when /config/
  config
else
  if options.tags.nil?
    options.tags = ARGV.first.split(":").map {|tag| "--tags @#{tag} "}.join
  end

  Dir.chdir(Pathname.new(__dir__).join("..").expand_path) do |cct_dir|
    puts "Loading from #{cct_dir}"
    env = File.exist?(LOCAL_CONFIG) ? "cct_config_file=#{LOCAL_CONFIG}" : ""
    system "#{env} bundle exec cucumber #{options.tags}"
  end
end

